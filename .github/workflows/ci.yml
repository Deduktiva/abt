name: Continuous Integration

permissions:
  contents: read

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  rails-test:
    name: Rails tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ruby-version: ['3.3']

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: abt_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true

    - name: Build FOP Docker container
      run: |
        podman build -f Dockerfile.fop -t abt-fop .

    - name: Set up FOP wrapper script
      run: |
        mkdir -p bin
        cat > bin/abt-fop-container << EOF
        #!/bin/bash
        # FOP wrapper for containerized execution
        PROJECT_ROOT="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")/.." && pwd)"
        podman run --rm \\
          -v "\$PROJECT_ROOT:\$PROJECT_ROOT":rw,Z \\
          -w "\$PWD" \\
          --userns=keep-id \\
          -u "$(id -u):$(id -g)" \\
          abt-fop \\
          "\$PROJECT_ROOT/script/abt-fop" "\$@"
        EOF
        chmod +x bin/abt-fop-container
        echo "$PWD/bin" >> $GITHUB_PATH
        cat bin/abt-fop-container

    - name: Test FOP integration
      run: |
        echo "Testing FOP binary accessibility..."
        which abt-fop-container || exit 1
        abt-fop-container -version || echo "FOP version check failed"

    - name: Create test configuration
      run: |
        mkdir -p config/settings
        cat > config/settings/test.yml << 'EOF'
        fop:
          binary_path: './bin/abt-fop-container'
        payments:
          public_url: 'https://example.com/pay/%token%'
        EOF

    - name: Setup database
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/abt_test
      run: |
        bundle exec rails db:create
        bundle exec rails db:migrate
        bundle exec rails db:seed

    - name: Run tests with coverage
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/abt_test
        RAILS_LOG_LEVEL: debug
      run: |
        bundle exec rails test --verbose

    - name: Generate coverage summary
      run: |
        echo "## Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage/coverage.lcov ]; then
          TOTAL_LINES=$(grep -c "^LF:" coverage/coverage.lcov | head -n 1 || echo "0")
          HIT_LINES=$(grep -c "^LH:" coverage/coverage.lcov | head -n 1 || echo "0")
          if [ "$TOTAL_LINES" -gt 0 ] && [ "$HIT_LINES" -gt 0 ]; then
            COVERAGE=$(awk "BEGIN {printf \"%.1f\", ($HIT_LINES/$TOTAL_LINES)*100}")
            echo "📊 **Line Coverage: ${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
          else
            echo "📊 Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📁 Full coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY

    - name: Store coverage results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

    - name: Coverage Report Comment
      if: github.event_name == 'pull_request'
      run: |
        if [ -f coverage/coverage.lcov ]; then
          echo "Coverage report generated for PR #${{ github.event.number }}"
          echo "See artifacts for detailed HTML coverage report"
        fi

  stimulus-memory-leak-check:
    name: Stimulus Memory Leak Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Check Stimulus controllers for event listener leaks
      run: npm run lint

  fop-container:
    name: FOP Container Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build FOP Docker container
      run: |
        podman build -f Dockerfile.fop -t abt-fop .

    - name: Test FOP is available
      run: |
        podman run --rm abt-fop fop -version
