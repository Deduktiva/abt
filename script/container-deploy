#!/bin/bash

# Container-based Production Deployment Script for ABT
# Deploys ABT using podman-compose with container images built by GitHub CI

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
COMPOSE_FILE="docker-compose.production.yml"
ENV_FILE=".env.production"
PROJECT_NAME="abt-production"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if we're in the correct directory
check_directory() {
    print_status "Checking if we're in the correct directory..."
    
    if [[ ! -f "config.ru" || ! -f "Gemfile" || ! -d "app" ]]; then
        print_error "This doesn't appear to be the ABT application root directory."
        exit 1
    fi
    
    if [[ ! -f "$COMPOSE_FILE" ]]; then
        print_error "Production compose file ($COMPOSE_FILE) not found."
        exit 1
    fi
    
    print_success "Directory check passed."
}

# Function to check environment configuration
check_environment() {
    print_status "Checking environment configuration..."
    
    if [[ ! -f "$ENV_FILE" ]]; then
        print_error "Environment file ($ENV_FILE) not found."
        print_error "Copy .env.production.example to $ENV_FILE and configure it."
        exit 1
    fi
    
    # Source environment file to check required variables
    source "$ENV_FILE"
    
    local required_vars=(
        "ABT_DB_PASSWORD"
        "SECRET_KEY_BASE"
        "MAILGUN_API_KEY"
        "MAILGUN_DOMAIN"
    )
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var}" ]]; then
            print_error "Required environment variable $var is not set in $ENV_FILE"
            exit 1
        fi
    done
    
    print_success "Environment configuration check passed."
}

# Function to check if podman/podman-compose is available
check_container_runtime() {
    print_status "Checking container runtime..."
    
    if command -v podman-compose >/dev/null 2>&1; then
        COMPOSE_CMD="podman-compose"
        print_success "Using podman-compose"
    elif command -v docker-compose >/dev/null 2>&1; then
        COMPOSE_CMD="docker-compose"
        print_warning "Using docker-compose (podman-compose preferred)"
    elif command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
        COMPOSE_CMD="docker compose"
        print_warning "Using docker compose (podman-compose preferred)"
    else
        print_error "No container compose runtime found. Please install podman-compose."
        exit 1
    fi
}

# Function to pull latest container images
pull_images() {
    print_status "Pulling latest container images..."
    
    if $COMPOSE_CMD -f "$COMPOSE_FILE" -p "$PROJECT_NAME" pull; then
        print_success "Container images updated successfully."
    else
        print_error "Failed to pull container images."
        exit 1
    fi
}

# Function to run database migrations
migrate_database() {
    print_status "Running database migrations..."
    
    if $COMPOSE_CMD -f "$COMPOSE_FILE" -p "$PROJECT_NAME" run --rm abt-webapp bundle exec rails db:migrate; then
        print_success "Database migration completed successfully."
    else
        print_error "Database migration failed."
        exit 1
    fi
}

# Function to deploy containers
deploy_containers() {
    print_status "Deploying container stack..."
    
    # Stop existing containers gracefully
    print_status "Stopping existing containers..."
    $COMPOSE_CMD -f "$COMPOSE_FILE" -p "$PROJECT_NAME" down --timeout 30 || true
    
    # Start new containers
    print_status "Starting new containers..."
    if $COMPOSE_CMD -f "$COMPOSE_FILE" -p "$PROJECT_NAME" up -d; then
        print_success "Container deployment completed successfully."
    else
        print_error "Container deployment failed."
        exit 1
    fi
}

# Function to check container health
check_health() {
    print_status "Checking container health..."
    
    local max_attempts=30
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        if $COMPOSE_CMD -f "$COMPOSE_FILE" -p "$PROJECT_NAME" ps | grep -q "Up.*healthy"; then
            print_success "Containers are healthy and ready."
            return 0
        fi
        
        print_status "Waiting for containers to become healthy... ($attempt/$max_attempts)"
        sleep 10
        ((attempt++))
    done
    
    print_error "Containers failed to become healthy within expected time."
    print_status "Container status:"
    $COMPOSE_CMD -f "$COMPOSE_FILE" -p "$PROJECT_NAME" ps
    exit 1
}

# Function to show deployment status
show_status() {
    print_status "Deployment Status:"
    echo
    $COMPOSE_CMD -f "$COMPOSE_FILE" -p "$PROJECT_NAME" ps
    echo
    print_status "To view logs: $COMPOSE_CMD -f $COMPOSE_FILE -p $PROJECT_NAME logs -f"
    print_status "To stop: $COMPOSE_CMD -f $COMPOSE_FILE -p $PROJECT_NAME down"
}

# Main deployment function
main() {
    echo "========================================"
    echo "  ABT Container Production Deployment"
    echo "========================================"
    echo
    
    # Perform all checks and deployment steps
    check_directory
    check_environment
    check_container_runtime
    pull_images
    migrate_database
    deploy_containers
    check_health
    show_status
    
    echo
    print_success "Container deployment completed successfully!"
    echo
    print_status "Summary of actions performed:"
    echo "  ✓ Validated environment configuration"
    echo "  ✓ Pulled latest container images"
    echo "  ✓ Ran database migrations"
    echo "  ✓ Deployed container stack"
    echo "  ✓ Verified container health"
    echo
    print_status "The application should now be running in containers."
    print_status "Access the application at the configured reverse proxy URL."
}

# Run the deployment
main "$@"